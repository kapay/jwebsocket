/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddTask.java
 *
 * Created on Nov 25, 2011, 1:07:23 PM
 */
package forms;

import java.net.UnknownHostException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import javolution.util.FastList;
import org.jwebsocket.watchdog.test.WatchDogTask;
import org.jwebsocket.watchdog.test.WatchDogTest;
import org.jwebsocket.watchdog.test.WatchDogTestService;

/**
 *
 * @author lester
 */
public class AddTask extends javax.swing.JDialog {

    public WatchDogTask wtask;
    public WatchDogTestService mTestService;
    public DefaultTableModel modelTest;
    static Boolean type;

    /** Creates new form AddTask */
    public AddTask(java.awt.Frame parent, boolean modal, WatchDogTestService aTestService, Boolean type) throws UnknownHostException {
        super(parent, modal);
        initComponents();
       
        AddTask.type = type;
        
        mTestService = aTestService;

        jpAtSpecifiedTime.setVisible(false);
        jpDaily.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpEveryNMinutes.setVisible(false);
        jpEveryNSeconds.setVisible(false);
        jpMonthly.setVisible(false);
        jpWeekly.setVisible(false);

        loadTestTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jcbFrequency = new javax.swing.JComboBox();
        jpEveryNSeconds = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jspinnerSeconds = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jpWeekly = new javax.swing.JPanel();
        jSpinnerTime = new javax.swing.JSpinner();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        jpEveryNMinutes = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerMinutes = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jpEveryNHours = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerHours = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jpAtSpecifiedTime = new javax.swing.JPanel();
        jSpinner7 = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jpMonthly = new javax.swing.JPanel();
        jSpinner5 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSpinnerMonthlyTime = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jpDaily = new javax.swing.JPanel();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jSpinnerDailyTime = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTests = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Id");

        jButton1.setText("Accept");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jcbFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select...", "Every N Seconds", "Every N Minutes", "Every N Hours", "Daily", "Weekly", "At the specified time", "Monthly" }));
        jcbFrequency.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbFrequencyMouseClicked(evt);
            }
        });
        jcbFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFrequencyActionPerformed(evt);
            }
        });

        jpEveryNSeconds.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpEveryNSeconds.setPreferredSize(new java.awt.Dimension(251, 120));

        jLabel10.setText("Every");

        jLabel11.setText("Second(s)");

        javax.swing.GroupLayout jpEveryNSecondsLayout = new javax.swing.GroupLayout(jpEveryNSeconds);
        jpEveryNSeconds.setLayout(jpEveryNSecondsLayout);
        jpEveryNSecondsLayout.setHorizontalGroup(
            jpEveryNSecondsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEveryNSecondsLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(12, 12, 12)
                .addComponent(jspinnerSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpEveryNSecondsLayout.setVerticalGroup(
            jpEveryNSecondsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEveryNSecondsLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel10))
            .addGroup(jpEveryNSecondsLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jspinnerSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpEveryNSecondsLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel11))
        );

        jpWeekly.setBorder(javax.swing.BorderFactory.createTitledBorder("Weekly"));

        Date datewk = new Date();
        SpinnerDateModel sm1 = new SpinnerDateModel(datewk, null, null, Calendar.AM_PM);
        jSpinnerTime = new JSpinner(sm1);
        JSpinner.DateEditor de1 = new JSpinner.DateEditor(jSpinnerTime, "hh:mm a");
        jSpinnerTime.setEditor(de1);

        jCheckBox9.setText("Sat");

        jCheckBox8.setText("Fri");

        jCheckBox3.setText("Sun");

        jCheckBox4.setText("Mon");

        jCheckBox5.setText("Tue");

        jCheckBox6.setText("Wed");

        jCheckBox7.setText("Thu");

        jLabel16.setText("Time");

        javax.swing.GroupLayout jpWeeklyLayout = new javax.swing.GroupLayout(jpWeekly);
        jpWeekly.setLayout(jpWeeklyLayout);
        jpWeeklyLayout.setHorizontalGroup(
            jpWeeklyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpWeeklyLayout.createSequentialGroup()
                .addComponent(jCheckBox4)
                .addGap(6, 6, 6)
                .addComponent(jCheckBox5)
                .addGap(12, 12, 12)
                .addComponent(jCheckBox6)
                .addGap(6, 6, 6)
                .addComponent(jCheckBox7))
            .addGroup(jpWeeklyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(jpWeeklyLayout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addComponent(jLabel16)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSpinnerTime))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpWeeklyLayout.createSequentialGroup()
                    .addComponent(jCheckBox8)
                    .addGap(19, 19, 19)
                    .addComponent(jCheckBox9)
                    .addGap(16, 16, 16)
                    .addComponent(jCheckBox3)))
        );
        jpWeeklyLayout.setVerticalGroup(
            jpWeeklyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpWeeklyLayout.createSequentialGroup()
                .addGroup(jpWeeklyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox7))
                .addGap(18, 18, 18)
                .addGroup(jpWeeklyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox3))
                .addGap(28, 28, 28)
                .addGroup(jpWeeklyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addContainerGap())
        );

        jpEveryNMinutes.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpEveryNMinutes.setPreferredSize(new java.awt.Dimension(251, 120));

        jLabel2.setText("Every");

        jLabel3.setText("Minute(s)");

        javax.swing.GroupLayout jpEveryNMinutesLayout = new javax.swing.GroupLayout(jpEveryNMinutes);
        jpEveryNMinutes.setLayout(jpEveryNMinutesLayout);
        jpEveryNMinutesLayout.setHorizontalGroup(
            jpEveryNMinutesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEveryNMinutesLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(jSpinnerMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3))
        );
        jpEveryNMinutesLayout.setVerticalGroup(
            jpEveryNMinutesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEveryNMinutesLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel2))
            .addGroup(jpEveryNMinutesLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jSpinnerMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpEveryNMinutesLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel3))
        );

        jpEveryNHours.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpEveryNHours.setPreferredSize(new java.awt.Dimension(251, 120));

        jLabel4.setText("Every");

        jLabel5.setText("Hour(s)");

        javax.swing.GroupLayout jpEveryNHoursLayout = new javax.swing.GroupLayout(jpEveryNHours);
        jpEveryNHours.setLayout(jpEveryNHoursLayout);
        jpEveryNHoursLayout.setHorizontalGroup(
            jpEveryNHoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEveryNHoursLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addComponent(jSpinnerHours, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5))
        );
        jpEveryNHoursLayout.setVerticalGroup(
            jpEveryNHoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEveryNHoursLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel4))
            .addGroup(jpEveryNHoursLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jSpinnerHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jpEveryNHoursLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel5))
        );

        jpAtSpecifiedTime.setBorder(javax.swing.BorderFactory.createTitledBorder("At a specified time"));

        jSpinner7.setModel(new javax.swing.SpinnerDateModel());

        jLabel13.setText("Date");

        javax.swing.GroupLayout jpAtSpecifiedTimeLayout = new javax.swing.GroupLayout(jpAtSpecifiedTime);
        jpAtSpecifiedTime.setLayout(jpAtSpecifiedTimeLayout);
        jpAtSpecifiedTimeLayout.setHorizontalGroup(
            jpAtSpecifiedTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtSpecifiedTimeLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel13)
                .addGap(30, 30, 30)
                .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jpAtSpecifiedTimeLayout.setVerticalGroup(
            jpAtSpecifiedTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtSpecifiedTimeLayout.createSequentialGroup()
                .addGroup(jpAtSpecifiedTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAtSpecifiedTimeLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel13))
                    .addGroup(jpAtSpecifiedTimeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jpMonthly.setBorder(javax.swing.BorderFactory.createTitledBorder("Monthly"));
        jpMonthly.setPreferredSize(new java.awt.Dimension(251, 120));

        jLabel8.setText("Every");

        jLabel9.setText("Configuration");

        jLabel12.setText("Month(s)");

        Date date2 = new Date();
        SpinnerDateModel sm2 = new SpinnerDateModel(date2, null, null, Calendar.AM_PM);
        jSpinnerMonthlyTime = new JSpinner(sm2);
        JSpinner.DateEditor de2 = new JSpinner.DateEditor(jSpinnerMonthlyTime, "hh:mm a");
        jSpinnerMonthlyTime.setEditor(de2);

        jLabel14.setText("Time");

        javax.swing.GroupLayout jpMonthlyLayout = new javax.swing.GroupLayout(jpMonthly);
        jpMonthly.setLayout(jpMonthlyLayout);
        jpMonthlyLayout.setHorizontalGroup(
            jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMonthlyLayout.createSequentialGroup()
                .addGroup(jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jpMonthlyLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMonthlyLayout.createSequentialGroup()
                                .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12))
                            .addComponent(jSpinnerMonthlyTime, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jpMonthlyLayout.setVerticalGroup(
            jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMonthlyLayout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12))
                .addGap(25, 25, 25)
                .addGroup(jpMonthlyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerMonthlyTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jpDaily.setBorder(javax.swing.BorderFactory.createTitledBorder("Daily"));
        jpDaily.setPreferredSize(new java.awt.Dimension(251, 120));

        jLabel6.setText("Day(s)");

        jLabel7.setText("Configuration");

        jRadioButton1.setText("Every");

        jRadioButton2.setText("Every day of week");

        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.AM_PM);
        jSpinnerDailyTime = new JSpinner(sm);
        JSpinner.DateEditor de = new JSpinner.DateEditor(jSpinnerDailyTime, "hh:mm a");
        jSpinnerDailyTime.setEditor(de);

        jLabel15.setText("Time");

        javax.swing.GroupLayout jpDailyLayout = new javax.swing.GroupLayout(jpDaily);
        jpDaily.setLayout(jpDailyLayout);
        jpDailyLayout.setHorizontalGroup(
            jpDailyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDailyLayout.createSequentialGroup()
                .addGroup(jpDailyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7)
                    .addGroup(jpDailyLayout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addGap(12, 12, 12)
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel6))
                    .addComponent(jRadioButton2)
                    .addGroup(jpDailyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerDailyTime)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jpDailyLayout.setVerticalGroup(
            jpDailyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDailyLayout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jpDailyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDailyLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jRadioButton1))
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpDailyLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel6)))
                .addGap(6, 6, 6)
                .addComponent(jRadioButton2)
                .addGap(9, 9, 9)
                .addGroup(jpDailyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerDailyTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTests);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcbFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpEveryNMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpEveryNHours, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpDaily, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpAtSpecifiedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpWeekly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpEveryNSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(9, 9, 9)
                        .addComponent(jButton2))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(jcbFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpEveryNMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpEveryNHours, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpDaily, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpAtSpecifiedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpWeekly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpEveryNSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() {
        //Setting the name of the columns of the Test table
        String[] columnsnamestest = new String[]{"id", "Description", "Implementation Class", "Fatal"};
        modelTest = new DefaultTableModel(columnsnamestest, 0);
        jtTests.setModel(modelTest);
//        jTable1.setCellSelectionEnabled(true);
    }

    private void loadTestTable() {

        initTable();
        List<WatchDogTest> list = mTestService.list();

        for (WatchDogTest i : list) {
            modelTest.addRow(new String[]{i.getId().toString(), i.getDescription().toString(), i.getImplClass().toString(), i.isFatal().toString()});
        }
    }

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    if (AddTask.type) {
        //Creatint the Task
    Calendar calen = new GregorianCalendar();

    String id = jtfID.getText().toString();
    List<WatchDogTest> tests;
    List<Integer> daysOfWeeksList = new FastList<Integer>();

    Date dateToExecute;

    Integer seconds = -1;
    Integer minutes = -1;
    Integer hours = -1;
    Date time = null;
    String frecuency;
    Integer month = -1;
    Integer dayOfWeek = -1;
    Integer dayOfMonth = -1;
    Integer everyNSeconds = -1;
    Integer everyNMinutes = -1;
    Integer everyNHours = -1;
    Integer everyNDays = -1;
    Integer everyNMonths = -1;
    Integer everyNYears = -1;


    Date date = new java.util.Date();
    System.out.println(new Timestamp(date.getTime()));


    List<WatchDogTest> list = mTestService.list();
    List<String> list2 = new FastList<String>();

    try {
        if (!jtfID.getText().isEmpty()) {
            wtask.setId(id);
        } else {
            throw new Exception("You most enter a valid ID");
        }
        /*
        Select...
        Every N Seconds
        Every N Minutes
        Every N Hours
        Daily
        Weekly
        At the specified time
        Monthly
         */
        if (jcbFrequency.getSelectedItem().toString().equals("Select...")) {
            throw new Exception("You Should Select a frequency to Create a TASK");
        }
        if (jcbFrequency.getSelectedItem().toString().equals("Every N Secons")) {
            everyNSeconds = calen.get(calen.SECOND);
        }

        if (jcbFrequency.getSelectedItem().toString().equals("Every N Minutes")) {
            minutes = Integer.valueOf(jSpinnerMinutes.getValue().toString());
        }
        if (jcbFrequency.getSelectedItem().toString().equals("Every N Hours")) {
            hours = Integer.valueOf(jSpinnerMinutes.getValue().toString());
        }
        if (jcbFrequency.getSelectedItem().toString().equals("Daily")) {

            if (jRadioButton1.isSelected()) {
                everyNDays = Integer.valueOf(jSpinner3.getValue().toString());
            }
            if (jRadioButton2.isSelected()) {
                everyNDays = 1;
            }

            time = (Date) jSpinnerDailyTime.getValue();
        }

        if (jcbFrequency.getSelectedItem().toString().equals("Weekly")) {

            if (jCheckBox4.isSelected()) {
                daysOfWeeksList.add(0);
            }
            if (jCheckBox5.isSelected()) {
                daysOfWeeksList.add(1);
            }
            if (jCheckBox6.isSelected()) {
                daysOfWeeksList.add(2);
            }
            if (jCheckBox7.isSelected()) {
                daysOfWeeksList.add(3);
            }
            if (jCheckBox8.isSelected()) {
                daysOfWeeksList.add(4);
            }
            if (jCheckBox9.isSelected()) {
                daysOfWeeksList.add(5);
            }
            if (jCheckBox3.isSelected()) {
                daysOfWeeksList.add(6);
            }
            if (!jCheckBox3.isSelected() && (!jCheckBox4.isSelected()) && (!jCheckBox5.isSelected()) && (!jCheckBox6.isSelected()) && (!jCheckBox7.isSelected()) && (!jCheckBox8.isSelected()) && (!jCheckBox9.isSelected())) {
                throw new Exception("Select at list one day of the week");
            }
            time = (Date) jSpinnerDailyTime.getValue();
        }

        if (jcbFrequency.getSelectedItem().toString().equals("At the specified time")) {

            date = (Date) jSpinner7.getValue();
            //wtask.setDate((Date)jSpinner7.getValue());
        }

        if (jcbFrequency.getSelectedItem().toString().equals("Monthly")) {

            everyNMonths = Integer.valueOf(jSpinner5.getValue().toString());
            time = (Date) jSpinnerMonthlyTime.getValue();
        }

        int[] selected = jtTests.getSelectedRows();
        if (selected.length == 0) {
            throw new Exception("You should select at list one test");
        }

        for (int i = 0; i < selected.length; i++) {
            wtask.getTests().add(list.get(selected[i]));
        }

        wtask.setFrequency(jcbFrequency.getSelectedItem().toString());
        wtask.setTime(time);
        wtask.setEveryNDays(everyNDays);
        wtask.setEveryNmonth(everyNMonths);
        wtask.setMinutes(minutes);
        wtask.setEveryNHours(hours);
        wtask.setHour(calen.get(Calendar.HOUR_OF_DAY));
        wtask.setDaysOfWeeks(daysOfWeeksList);
        wtask.setLastExecution("Not Executed Yet");
        wtask.setDate(calen.getTime());

//        wtask.setDate(calen.getTime());
//        wtask.setDayOfWeek(calen.get(calen.DAY_OF_WEEK));
//        wtask.setDayOfMonth(calen.get(calen.DAY_OF_MONTH));
//        wtask.setHour(calen.getTime().getHours());
//        wtask.setMinutes(calen.getTime().getMinutes());
//        wtask.setMonth(calen.getTime().getMonth());
//        wtask.setSeconds(calen.getTime().getSeconds());
//        wtask.setYear(1900 + calen.getTime().getYear());


        this.dispose();


    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
    }
    
    if (!AddTask.type) {
        //Updating Task
    Calendar calen = new GregorianCalendar();

    String id = jtfID.getText().toString();
    List<WatchDogTest> tests;
    List<Integer> daysOfWeeksList = new FastList<Integer>();

    Date dateToExecute;

    Integer seconds = -1;
    Integer minutes = -1;
    Integer hours = -1;
    Date time = null;
    String frecuency;
    Integer month = -1;
    Integer dayOfWeek = -1;
    Integer dayOfMonth = -1;
    Integer everyNSeconds = -1;
    Integer everyNMinutes = -1;
    Integer everyNHours = -1;
    Integer everyNDays = -1;
    Integer everyNMonths = -1;
    Integer everyNYears = -1;


    Date date = new java.util.Date();
    System.out.println(new Timestamp(date.getTime()));


    List<WatchDogTest> list = mTestService.list();
    List<String> list2 = new FastList<String>();

    try {
        if (!jtfID.getText().isEmpty()) {
            wtask.setId(id);
        } else {
            throw new Exception("You most enter a valid ID");
        }
        /*
        Select...
        Every N Seconds
        Every N Minutes
        Every N Hours
        Daily
        Weekly
        At the specified time
        Monthly
         */
        if (jcbFrequency.getSelectedItem().toString().equals("Select...")) {
            throw new Exception("You Should Select a frequency to Create a TASK");
        }
        if (jcbFrequency.getSelectedItem().toString().equals("Every N Secons")) {
            everyNSeconds = calen.get(calen.SECOND);
        }

        if (jcbFrequency.getSelectedItem().toString().equals("Every N Minutes")) {
            minutes = Integer.valueOf(jSpinnerMinutes.getValue().toString());
        }
        if (jcbFrequency.getSelectedItem().toString().equals("Every N Hours")) {
            hours = Integer.valueOf(jSpinnerMinutes.getValue().toString());
        }
        if (jcbFrequency.getSelectedItem().toString().equals("Daily")) {

            if (jRadioButton1.isSelected()) {
                everyNDays = Integer.valueOf(jSpinner3.getValue().toString());
            }
            if (jRadioButton2.isSelected()) {
                everyNDays = 1;
            }

            time = (Date) jSpinnerDailyTime.getValue();
        }

        if (jcbFrequency.getSelectedItem().toString().equals("Weekly")) {

            if (jCheckBox4.isSelected()) {
                daysOfWeeksList.add(0);
            }
            if (jCheckBox5.isSelected()) {
                daysOfWeeksList.add(1);
            }
            if (jCheckBox6.isSelected()) {
                daysOfWeeksList.add(2);
            }
            if (jCheckBox7.isSelected()) {
                daysOfWeeksList.add(3);
            }
            if (jCheckBox8.isSelected()) {
                daysOfWeeksList.add(4);
            }
            if (jCheckBox9.isSelected()) {
                daysOfWeeksList.add(5);
            }
            if (jCheckBox3.isSelected()) {
                daysOfWeeksList.add(6);
            }
            if (!jCheckBox3.isSelected() && (!jCheckBox4.isSelected()) && (!jCheckBox5.isSelected()) && (!jCheckBox6.isSelected()) && (!jCheckBox7.isSelected()) && (!jCheckBox8.isSelected()) && (!jCheckBox9.isSelected())) {
                throw new Exception("Select at list one day of the week");
            }
            time = (Date) jSpinnerDailyTime.getValue();
        }

        if (jcbFrequency.getSelectedItem().toString().equals("At the specified time")) {

            date = (Date) jSpinner7.getValue();
            //wtask.setDate((Date)jSpinner7.getValue());
        }

        if (jcbFrequency.getSelectedItem().toString().equals("Monthly")) {

            everyNMonths = Integer.valueOf(jSpinner5.getValue().toString());
            time = (Date) jSpinnerMonthlyTime.getValue();
        }

        int[] selected = jtTests.getSelectedRows();
        if (selected.length == 0) {
            throw new Exception("You should select at list one test");
        }

        for (int i = 0; i < selected.length; i++) {
            wtask.getTests().add(list.get(selected[i]));
        }

        wtask.setFrequency(jcbFrequency.getSelectedItem().toString());
        wtask.setTime(time);
        wtask.setEveryNDays(everyNDays);
        wtask.setEveryNmonth(everyNMonths);
        wtask.setMinutes(minutes);
        wtask.setEveryNHours(hours);
        wtask.setHour(calen.get(Calendar.HOUR_OF_DAY));
        wtask.setDaysOfWeeks(daysOfWeeksList);
        wtask.setLastExecution("Not Executed Yet");
        wtask.setDate(calen.getTime());

//        wtask.setDate(calen.getTime());
//        wtask.setDayOfWeek(calen.get(calen.DAY_OF_WEEK));
//        wtask.setDayOfMonth(calen.get(calen.DAY_OF_MONTH));
//        wtask.setHour(calen.getTime().getHours());
//        wtask.setMinutes(calen.getTime().getMinutes());
//        wtask.setMonth(calen.getTime().getMonth());
//        wtask.setSeconds(calen.getTime().getSeconds());
//        wtask.setYear(1900 + calen.getTime().getYear());


        this.dispose();


    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
    }
    
}//GEN-LAST:event_jButton1ActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    //on forWindows closing
    wtask = null;
    this.dispose();
}//GEN-LAST:event_formWindowClosing

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    //on forWindows closing
    wtask = null;
    this.dispose();
}//GEN-LAST:event_jButton2ActionPerformed

private void jcbFrequencyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbFrequencyMouseClicked
}//GEN-LAST:event_jcbFrequencyMouseClicked

private void jcbFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFrequencyActionPerformed
    /*Select...
    Every N Minutes
    Every N Hours
    Every N Seconds
    Daily
    Weekly
    At the specified time
    Monthly*/

    if (jcbFrequency.getSelectedItem().toString().equals("Select...")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(false);
    }
    if (jcbFrequency.getSelectedItem().toString().equals("Every N Seconds")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(true);
    }

    if (jcbFrequency.getSelectedItem().toString().equals("Every N Minutes")) {
        jpEveryNMinutes.setVisible(true);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(false);
    }

    if (jcbFrequency.getSelectedItem().toString().equals("Every N Hours")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(true);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(false);
    }

    if (jcbFrequency.getSelectedItem().toString().equals("Daily")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(true);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(false);
    }

    if (jcbFrequency.getSelectedItem().toString().equals("Weekly")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(true);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(false);
    }

    if (jcbFrequency.getSelectedItem().toString().equals("At the specified time")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(true);
        jpMonthly.setVisible(false);
        jpEveryNSeconds.setVisible(false);
    }

    if (jcbFrequency.getSelectedItem().toString().equals("Monthly")) {
        jpEveryNMinutes.setVisible(false);
        jpEveryNHours.setVisible(false);
        jpDaily.setVisible(false);
        jpWeekly.setVisible(false);
        jpAtSpecifiedTime.setVisible(false);
        jpMonthly.setVisible(true);
        jpEveryNSeconds.setVisible(false);
    }
}//GEN-LAST:event_jcbFrequencyActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// Windos opened
    
    if (!AddTask.type) {
        this.setTitle("Update Task");
        jButton1.setText("Update");
        jtfID.setText(wtask.getId());
        

    } else {
        this.setTitle("Add Task");
        jButton1.setText("Add");

    }
    
}//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner7;
    private javax.swing.JSpinner jSpinnerDailyTime;
    private javax.swing.JSpinner jSpinnerHours;
    private javax.swing.JSpinner jSpinnerMinutes;
    private javax.swing.JSpinner jSpinnerMonthlyTime;
    private javax.swing.JSpinner jSpinnerTime;
    private javax.swing.JComboBox jcbFrequency;
    private javax.swing.JPanel jpAtSpecifiedTime;
    private javax.swing.JPanel jpDaily;
    private javax.swing.JPanel jpEveryNHours;
    private javax.swing.JPanel jpEveryNMinutes;
    private javax.swing.JPanel jpEveryNSeconds;
    private javax.swing.JPanel jpMonthly;
    private javax.swing.JPanel jpWeekly;
    private javax.swing.JSpinner jspinnerSeconds;
    private javax.swing.JTable jtTests;
    private javax.swing.JTextField jtfID;
    // End of variables declaration//GEN-END:variables
}
