<?xml version="1.0" encoding="UTF-8"?>
<!--
	Document   : jWebSocket.xml
	Created on : March 18, 2010, 10:24 AM
	Author     : aschulze, puran
	Description: Configuration of the jWebSocket Server.
	This includes engines, servers, plug-ins, filter, rights, roles and users 
	as well as logging.
-->

<!-- jWebSocket server configuration -->
<jWebSocket>
	<!--
		installation can be prod or dev.
		  'prod'- installation means all the classes will be loaded
		   from the jars defined in this configuration file
		  'dev' - installation means running directly from the source,
		   all the jar files given are ignored.
		   Default value if not specified would be 'prod'
	-->
	<installation>prod</installation>

	<!--
		define the protocol, default protocol if not specified is 'json'
		possible values are [json|xml|csv]
	-->
	<protocol>json</protocol>

	<!--
		the unique ID of this instance within a jWebSocket cluster
		can be left empty to run just a single stand-alone server
		Preparation for pending cluster-plug-in
	-->
	<node_id>01</node_id>

	<!-- jWebSocket logging configuration -->
	<logging>
		<log4j>
			<!-- log4j appender, one of the following options [console|singlefile|rollingfile] -->
			<appender>console</appender>
			<!-- layout, please refer to http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p - %C{1}: %m%n</pattern>
			<!-- log-level, one of the following options: [all|debug|info|warn|error|fatal|off] -->
			<level>debug</level>
			<!-- filename, used only when appender != console -->
			<filename>jWebSocket.log</filename>
			<!-- controls write cache for logging -->
			<buffered>true</buffered>
			<!-- specifies the size of the write cache for logging -->
			<buffersize>65536</buffersize>
		</log4j>
	</logging>

	<!--
		initializer class required only in 'dev' mode so that client application can register custom servers,
		plugins at compile time for debugging capability to test custom plugins and servers without a need for
		jar files
	-->
	<initializerClass>org.jwebsocket.factory.JWebSocketInitializer</initializerClass>

	<!--
		 engines to be instantiated for jWebSocket, Only one engine will be initialized
		 and run. The topmost engine configured will be picked and run by the system.
	-->
	<!-- jWebSocket engine configuration -->
	<engines>
		<engine>
			<name>org.jwebsocket.tcp.TCPEngine</name>
			<id>tcp0</id>
			<jar>jWebSocketServer-Bundle-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			 these domains are accepted by the engine listening on the above mentioned port 
			<domains>
				<domain>jwebsocket.org</domain>
				<domain>jwebsocket.com</domain>
			</domains>
			 default session timeout 1h, max timeout currently 1 hour 
			<timeout>0</timeout>
			
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			
			<maxframesize>1048840</maxframesize>
		</engine>	
	</engines>

	<!-- server types to be instantiated for jWebSocket -->
	<servers>
		<server>
			<name>org.jwebsocket.server.TokenServer</name>
			<id>ts0</id>
			<jar>jWebSocketServer-Bundle-1.0.jar</jar>
			<!-- define the thread pool properties. Thread are spawned when Token's spawnThread value is true 
			 Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. 
			 If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. 
			 Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.
			 -->
			<threadPool>
				<!--  number of thread that are "waiting" even if the queue is empty  -->
				<corePoolSize>10</corePoolSize>
				<!--  number maximum of thread that can be running at the same time -->
				<maximumPoolSize>100</maximumPoolSize>
				<!--  time before the desctruction of "free" threads (seconds) -->
				<keepAliveTime>60</keepAliveTime>
				<!--  size of the blocking queue. Connection will be refused if the queue is full and the poolsize is equals to the maximumPoolSize -->
				<blockingQueueSize>1000</blockingQueueSize>
			</threadPool>
		</server>
	</servers>

	<!-- jWebSocket global rights -->
	<rights>
		<!-- configuration of system plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>broadcast</id>
			<description>Broadcast message to all other clients.</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>send</id>
			<description>Send message to a single target client.</description>
		</right>

		<!-- Caution! Be careful with this right!
				Unauthorized use could stop your server from
				providing its services! -->
		<right>
			<ns>org.jwebsocket.plugins.admin</ns>
			<id>shutdown</id>
			<description>Allow to shutdown the server</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.admin</ns>
			<id>getConnections</id>
			<description>Allow to retreive current connections</description>
		</right>

		<!-- Channel rights -->
		<right>
			<ns>org.jwebsocket.plugins.channel</ns>
			<id>start</id>
			<description>Allow to start a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channel</ns>
			<id>stop</id>
			<description>Allow to stop a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channel</ns>
			<id>suspend</id>
			<description>Allow to suspend a channel</description>
		</right>
	</rights>

	<!-- jWebSocket roles -->
	<roles>
		<role>
			<id>Administrator</id>
			<description>Administrators</description>
			<rights>
				<!-- list of rights for "Administrator" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				
		

				<!-- Caution! Be careful with this right!
						Unauthorized use could stop your server from
						providing its services! -->
				<right>org.jwebsocket.plugins.admin.shutdown</right>
				<right>org.jwebsocket.plugins.admin.getConnections</right>

				<!-- channel rights -->
				<right>org.jwebsocket.plugins.channel.start</right>
				<right>org.jwebsocket.plugins.channel.stop</right>
				<right>org.jwebsocket.plugins.channel.suspend</right>
			</rights>
		</role>
		<role>
			<id>User</id>
			<description>Registered and authenticated users.</description>
			<rights>
				<!-- list of rights for "User" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				
			</rights>
		</role>
		<role>
			<id>Guest</id>
			<description>Anonymous users (not registered)</description>
			<rights>
				<!-- list of rights for "Guest" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>

			</rights>
		</role>
	</roles>

	<!-- jWebSocket users -->
	<users>
		<user>
			<loginname>aschulze</loginname>
			<firstname>Alexander</firstname>
			<lastname>Schulze</lastname>
			<password>t0p-s3cr3t</password>
			<description>jWebSocket Founder</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Administrator</role>
				<role>User</role>
				<role>Guest</role>
			</roles>
		</user>
	</users>

	<!-- channels to be instantiated for jWebSocket -->
	<channels>
		<!-- Logger Channel -->
		<channel>
			<id>jws.logger.channel</id>
			<name>Logger Channel</name>
			<system>true</system>
			<secret>secret</secret>
			<access>access</access>
			<!-- user must exist -->
			<owner>root</owner>
		</channel>
		<!-- Admin Channel -->
		<channel>
			<id>jws.admin.channel</id>
			<name>Admin Channel</name>
			<system>true</system>
			<secret>secret</secret>
			<access>access</access>
			<!-- user must exist -->
			<owner>root</owner>
		</channel>
		<!-- Public Channels -->
		<channel>
			<id>channelA</id>
			<name>Channel A</name>
			<system>true</system>
			<!--
			<private></private>
			-->
			<secret>secret</secret>
			<access>access</access>
			<!-- user must exist -->
			<owner>root</owner>
		</channel>
		<channel>
			<id>channelB</id>
			<name>Channel B</name>
			<system>true</system>
			<secret>secret</secret>
			<access>access</access>
			<owner>root</owner>
		</channel>
		<channel>
			<id>channelC</id>
			<name>Channel C</name>
			<system>true</system>
			<secret>secret</secret>
			<access>access</access>
			<owner>root</owner>
		</channel>
	</channels>

	<!-- plug-ins to be instantiated for jWebSocket -->
	<plugins>
		<plugin>
			<name>org.jwebsocket.plugins.system.SystemPlugIn</name>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>jws.system</id>
			<jar>jWebSocketServer-Bundle-1.0.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<!-- specify whether open, close, login, logout events should 
					 be broadcasted per default. To suppress these broadcasts
					 per events turn settings "on" here and optionally suppress
					 them per client command. -->
				<setting key="broadcastOpenEvent">true</setting>
				<setting key="broadcastCloseEvent">true</setting>
				<setting key="broadcastLoginEvent">true</setting>
				<setting key="broadcastLogoutEvent">true</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		<plugin>
			<name>org.jwebsocket.plugins.admin.AdminPlugIn</name>
			<id>jws.admin</id>
			<ns>org.jwebsocket.plugins.admin</ns>
			<jar>jWebSocketServer-Bundle-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="allowShutdown">true</setting>
			</settings>
		</plugin>
		<plugin>
			<name>org.jwebsocket.plugins.channels.ChannelPlugIn</name>
			<id>jws.channels</id>
			<ns>org.jwebsocket.plugins.channels</ns>
			<jar>jWebSocketServer-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				 specify plug-in settings 
				<setting key="use_persistent_store">false</setting>
				<setting key="allow_new_channels">true</setting>
			</settings>
		</plugin>-->

		<plugin>
			<name>org.jwebsocket.watchdog.plugin.MyTokenPlugIn</name>
			<ns>org.jwebsocket.watchdog</ns>
			<id>jws.watchdog</id>
			<jar>WatchDog.jar</jar>
			<settings>
				
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
	</plugins>

	<!-- filters to be instantiated for jWebSocket -->
	<filters>
		<filter>
			<name>org.jwebsocket.filters.system.SystemFilter</name>
			<ns>org.jwebsocket.filters.system</ns>
			<id>systemFilter</id>
			<jar>jWebSocketPlugins-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
	</filters>

</jWebSocket>
