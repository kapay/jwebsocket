<?xml version="1.0" encoding="UTF-8"?>
<!--
        *** GENERATED FROM project.xml - DO NOT EDIT  ***
        ***         EDIT ../build.xml INSTEAD         ***

        For the purpose of easier reading the script
        is divided into following sections:
        - initialization
        - compilation
        - dist
        - execution
        - debugging
        - javadoc
        - junit compilation
        - junit execution
        - junit debugging
        - cleanup

        --><project xmlns:webproject1="http://www.netbeans.org/ns/web-project/1"
         xmlns:webproject2="http://www.netbeans.org/ns/web-project/2"
         xmlns:webproject3="http://www.netbeans.org/ns/web-project/3"
         name="Tomcat7Template-impl"
         default="default"
         basedir="..">
   <import file="ant-deploy.xml"/>
   <fail message="Please build using Ant 1.7.1 or higher.">
      <condition>
         <not>
            <antversion atleast="1.7.1"/>
         </not>
      </condition>
   </fail>
   <target name="default" depends="dist,javadoc" description="Build whole project."/>
   <!--
                INITIALIZATION SECTION
            --><target name="-pre-init"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-init-private" depends="-pre-init">
      <property file="nbproject/private/private.properties"/>
   </target>
   <target name="-init-user" depends="-pre-init,-init-private">
      <property file="${user.properties.file}"/>
      <!-- The two properties below are usually overridden --><!-- by the active platform. Just a fallback. --><property name="default.javac.source" value="1.4"/>
      <property name="default.javac.target" value="1.4"/>
   </target>
   <target name="-init-project" depends="-pre-init,-init-private,-init-user">
      <property file="nbproject/project.properties"/>
   </target>
   <target name="-do-ear-init"
           depends="-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property"
           if="dist.ear.dir"/>
   <target name="-do-init"
           depends="-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property">
      <condition property="have.tests">
         <or>
            <available file="${test.src.dir}"/>
         </or>
      </condition>
      <condition property="have.sources">
         <or>
            <available file="${src.dir}"/>
         </or>
      </condition>
      <condition property="netbeans.home+have.tests">
         <and>
            <isset property="netbeans.home"/>
            <isset property="have.tests"/>
         </and>
      </condition>
      <condition property="no.javadoc.preview">
         <isfalse value="${javadoc.preview}"/>
      </condition>
      <property name="javac.compilerargs" value=""/>
      <condition property="no.deps">
         <and>
            <istrue value="${no.dependencies}"/>
         </and>
      </condition>
      <condition property="no.dist.ear.dir">
         <not>
            <isset property="dist.ear.dir"/>
         </not>
      </condition>
      <property name="build.web.excludes" value="${build.classes.excludes}"/>
      <condition property="do.compile.jsps">
         <istrue value="${compile.jsps}"/>
      </condition>
      <condition property="do.debug.server">
         <or>
            <not>
               <isset property="debug.server"/>
            </not>
            <istrue value="${debug.server}"/>
            <and>
               <not>
                  <istrue value="${debug.server}"/>
               </not>
               <not>
                  <istrue value="${debug.client}"/>
               </not>
            </and>
         </or>
      </condition>
      <condition property="do.debug.client">
         <istrue value="${debug.client}"/>
      </condition>
      <condition property="do.display.browser">
         <istrue value="${display.browser}"/>
      </condition>
      <condition property="do.display.browser.debug">
         <and>
            <isset property="do.display.browser"/>
            <not>
               <isset property="do.debug.client"/>
            </not>
         </and>
      </condition>
      <available file="${conf.dir}/MANIFEST.MF" property="has.custom.manifest"/>
      <available file="${persistence.xml.dir}/persistence.xml" property="has.persistence.xml"/>
      <condition property="do.war.package.with.custom.manifest">
         <isset property="has.custom.manifest"/>
      </condition>
      <condition property="do.war.package.without.custom.manifest">
         <not>
            <isset property="has.custom.manifest"/>
         </not>
      </condition>
      <condition property="do.tmp.war.package.with.custom.manifest">
         <and>
            <isset property="has.custom.manifest"/>
            <or>
               <isfalse value="${directory.deployment.supported}"/>
               <isset property="dist.ear.dir"/>
            </or>
         </and>
      </condition>
      <condition property="do.tmp.war.package.without.custom.manifest">
         <and>
            <not>
               <isset property="has.custom.manifest"/>
            </not>
            <or>
               <isfalse value="${directory.deployment.supported}"/>
               <isset property="dist.ear.dir"/>
            </or>
         </and>
      </condition>
      <condition property="do.tmp.war.package">
         <or>
            <isfalse value="${directory.deployment.supported}"/>
            <isset property="dist.ear.dir"/>
         </or>
      </condition>
      <property value="${build.web.dir}/META-INF" name="build.meta.inf.dir"/>
      <condition property="application.args.param" value="${application.args}" else="">
         <and>
            <isset property="application.args"/>
            <not>
               <equals arg1="${application.args}" arg2="" trim="true"/>
            </not>
         </and>
      </condition>
      <property name="source.encoding" value="${file.encoding}"/>
      <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
         <and>
            <isset property="javadoc.encoding"/>
            <not>
               <equals arg1="${javadoc.encoding}" arg2=""/>
            </not>
         </and>
      </condition>
      <property name="javadoc.encoding.used" value="${source.encoding}"/>
      <property name="includes" value="**"/>
      <property name="excludes" value=""/>
      <property name="runmain.jvmargs" value=""/>
      <path id="endorsed.classpath.path" path="${endorsed.classpath}"/>
      <condition property="endorsed.classpath.cmd.line.arg"
                 value="-Xbootclasspath/p:'${toString:endorsed.classpath.path}'"
                 else="">
         <and>
            <isset property="endorsed.classpath"/>
            <length length="0" string="${endorsed.classpath}" when="greater"/>
         </and>
      </condition>
      <condition property="jdkBug6558476" else="false">
         <and>
            <matches string="${java.specification.version}" pattern="1\.[56]"/>
            <not>
               <os family="unix"/>
            </not>
         </and>
      </condition>
      <property name="javac.fork" value="${jdkBug6558476}"/>
   </target>
   <target name="-init-cos" depends="init" unless="deploy.on.save">
      <condition property="deploy.on.save" value="true">
         <or>
            <istrue value="${j2ee.deploy.on.save}"/>
            <istrue value="${j2ee.compile.on.save}"/>
         </or>
      </condition>
   </target>
   <target name="-post-init"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-init-check"
           depends="-pre-init,-init-private,-init-user,-init-project,-do-init">
      <fail unless="src.dir">Must set src.dir</fail>
      <fail unless="test.src.dir">Must set test.src.dir</fail>
      <fail unless="build.dir">Must set build.dir</fail>
      <fail unless="build.web.dir">Must set build.web.dir</fail>
      <fail unless="build.generated.dir">Must set build.generated.dir</fail>
      <fail unless="dist.dir">Must set dist.dir</fail>
      <fail unless="build.classes.dir">Must set build.classes.dir</fail>
      <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
      <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
      <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
      <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
      <fail unless="dist.war">Must set dist.war</fail>
      <condition property="missing.j2ee.server.home">
         <and>
            <matches pattern="j2ee.server.home" string="${j2ee.platform.classpath}"/>
            <not>
               <isset property="j2ee.server.home"/>
            </not>
         </and>
      </condition>
      <fail if="missing.j2ee.server.home">
The Java EE server classpath is not correctly set up - server home directory is missing.
Either open the project in the IDE and assign the server or setup the server classpath manually.
For example like this:
   ant -Dj2ee.server.home=&lt;app_server_installation_directory&gt;
                </fail>
      <fail unless="j2ee.platform.classpath">
The Java EE server classpath is not correctly set up. Your active server type is ${j2ee.server.type}.
Either open the project in the IDE and assign the server or setup the server classpath manually.
For example like this:
   ant -Duser.properties.file=&lt;path_to_property_file&gt; (where you put the property "j2ee.platform.classpath" in a .properties file)
or ant -Dj2ee.platform.classpath=&lt;server_classpath&gt; (where no properties file is used)
                </fail>
   </target>
   <target name="-init-macrodef-property">
      <macrodef name="property" uri="http://www.netbeans.org/ns/web-project/1">
         <attribute name="name"/>
         <attribute name="value"/>
         <sequential>
            <property name="@{name}" value="${@{value}}"/>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-javac-with-processors"
           depends="-init-ap-cmdline-properties"
           if="ap.supported.internal">
      <macrodef name="javac" uri="http://www.netbeans.org/ns/web-project/2">
         <attribute name="srcdir" default="${src.dir}"/>
         <attribute name="destdir" default="${build.classes.dir}"/>
         <attribute name="classpath" default="${javac.classpath}:${j2ee.platform.classpath}"/>
         <attribute name="processorpath" default="${javac.processorpath}"/>
         <attribute name="apgeneratedsrcdir"
                    default="${build.generated.sources.dir}/ap-source-output"/>
         <attribute name="includes" default="${includes}"/>
         <attribute name="excludes" default="${excludes}"/>
         <attribute name="debug" default="${javac.debug}"/>
         <attribute name="gensrcdir" default="${empty.dir}"/>
         <element name="customize" optional="true"/>
         <sequential>
            <property name="empty.dir" location="${build.dir}/empty"/>
            <mkdir dir="${empty.dir}"/>
            <mkdir dir="@{apgeneratedsrcdir}"/>
            <javac srcdir="@{srcdir}" destdir="@{destdir}" debug="@{debug}"
                   deprecation="${javac.deprecation}"
                   encoding="${source.encoding}"
                   source="${javac.source}"
                   target="${javac.target}"
                   includes="@{includes}"
                   excludes="@{excludes}"
                   fork="${javac.fork}"
                   includeantruntime="false">
               <src>
                  <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                     <include name="*"/>
                  </dirset>
               </src>
               <classpath>
                  <path path="@{classpath}"/>
               </classpath>
               <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
               <compilerarg line="${javac.compilerargs}"/>
               <compilerarg value="-processorpath"/>
               <compilerarg path="@{processorpath}:${empty.dir}"/>
               <compilerarg line="${ap.processors.internal}"/>
               <compilerarg value="-s"/>
               <compilerarg path="@{apgeneratedsrcdir}"/>
               <compilerarg line="${ap.proc.none.internal}"/>
               <customize/>
            </javac>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-javac-without-processors"
           depends="-init-ap-cmdline-properties"
           unless="ap.supported.internal">
      <macrodef name="javac" uri="http://www.netbeans.org/ns/web-project/2">
         <attribute name="srcdir" default="${src.dir}"/>
         <attribute name="destdir" default="${build.classes.dir}"/>
         <attribute name="classpath" default="${javac.classpath}:${j2ee.platform.classpath}"/>
         <attribute name="processorpath" default="${javac.processorpath}"/>
         <attribute name="apgeneratedsrcdir"
                    default="${build.generated.sources.dir}/ap-source-output"/>
         <attribute name="includes" default="${includes}"/>
         <attribute name="excludes" default="${excludes}"/>
         <attribute name="debug" default="${javac.debug}"/>
         <attribute name="gensrcdir" default="${empty.dir}"/>
         <element name="customize" optional="true"/>
         <sequential>
            <property name="empty.dir" location="${build.dir}/empty"/>
            <mkdir dir="${empty.dir}"/>
            <javac srcdir="@{srcdir}" destdir="@{destdir}" debug="@{debug}"
                   deprecation="${javac.deprecation}"
                   encoding="${source.encoding}"
                   source="${javac.source}"
                   target="${javac.target}"
                   includes="@{includes}"
                   excludes="@{excludes}"
                   includeantruntime="false">
               <src>
                  <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                     <include name="*"/>
                  </dirset>
               </src>
               <classpath>
                  <path path="@{classpath}"/>
               </classpath>
               <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
               <compilerarg line="${javac.compilerargs}"/>
               <customize/>
            </javac>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-javac"
           depends="-init-macrodef-javac-with-processors,-init-macrodef-javac-without-processors">
      <macrodef name="depend" uri="http://www.netbeans.org/ns/web-project/2">
         <attribute name="srcdir" default="${src.dir}"/>
         <attribute name="destdir" default="${build.classes.dir}"/>
         <attribute name="classpath" default="${javac.classpath}:${j2ee.platform.classpath}"/>
         <sequential>
            <depend srcdir="@{srcdir}" destdir="@{destdir}" cache="${build.dir}/depcache"
                    includes="${includes}"
                    excludes="${excludes}">
               <classpath>
                  <path path="@{classpath}"/>
               </classpath>
            </depend>
         </sequential>
      </macrodef>
      <macrodef name="force-recompile" uri="http://www.netbeans.org/ns/web-project/2">
         <attribute name="destdir" default="${build.classes.dir}"/>
         <sequential>
            <fail unless="javac.includes">Must set javac.includes</fail>
            <pathconvert property="javac.includes.binary" pathsep="${line.separator}">
               <path>
                  <filelist dir="@{destdir}" files="${javac.includes}"/>
               </path>
               <globmapper from="*.java" to="*.class"/>
            </pathconvert>
            <tempfile property="javac.includesfile.binary" deleteonexit="true"/>
            <echo message="${javac.includes.binary}" file="${javac.includesfile.binary}"/>
            <delete>
               <files includesfile="${javac.includesfile.binary}"/>
            </delete>
            <delete file="${javac.includesfile.binary}"/>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-junit">
      <macrodef name="junit" uri="http://www.netbeans.org/ns/web-project/2">
         <attribute name="includes" default="${includes}"/>
         <attribute name="excludes" default="${excludes}"/>
         <attribute name="testincludes" default="**"/>
         <sequential>
            <junit showoutput="true" fork="true" dir="${basedir}" failureproperty="tests.failed"
                   errorproperty="tests.failed"
                   tempdir="${java.io.tmpdir}">
               <batchtest todir="${build.test.results.dir}">
                  <fileset dir="${test.src.dir}" includes="@{includes}" excludes="@{excludes},${excludes}">
                     <filename name="@{testincludes}"/>
                  </fileset>
               </batchtest>
               <classpath>
                  <path path="${run.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}"/>
               </classpath>
               <syspropertyset>
                  <propertyref prefix="test-sys-prop."/>
                  <mapper type="glob" from="test-sys-prop.*" to="*"/>
               </syspropertyset>
               <formatter type="brief" usefile="false"/>
               <formatter type="xml"/>
               <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
               <jvmarg value="-ea"/>
               <jvmarg line="${runmain.jvmargs}"/>
            </junit>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-java">
      <macrodef name="java" uri="http://www.netbeans.org/ns/web-project/1">
         <attribute name="classname" default="${main.class}"/>
         <attribute name="classpath" default="${debug.classpath}"/>
         <element name="customize" optional="true"/>
         <sequential>
            <java fork="true" classname="@{classname}">
               <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
               <jvmarg line="${runmain.jvmargs}"/>
               <classpath>
                  <path path="@{classpath}:${j2ee.platform.classpath}"/>
               </classpath>
               <syspropertyset>
                  <propertyref prefix="run-sys-prop."/>
                  <mapper type="glob" from="run-sys-prop.*" to="*"/>
               </syspropertyset>
               <customize/>
            </java>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-nbjsdebug">
      <macrodef name="nbjsdebugstart" uri="http://www.netbeans.org/ns/web-project/1">
         <attribute name="webUrl" default="${client.url}"/>
         <sequential>
            <nbjsdebugstart webUrl="@{webUrl}" urlPart="${client.urlPart}"/>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-macrodef-nbjpda" depends="-init-debug-args">
      <macrodef name="nbjpdastart" uri="http://www.netbeans.org/ns/web-project/1">
         <attribute name="name" default="${main.class}"/>
         <attribute name="classpath" default="${debug.classpath}:${j2ee.platform.classpath}"/>
         <sequential>
            <nbjpdastart transport="${debug-transport}" addressproperty="jpda.address" name="@{name}">
               <classpath>
                  <path path="@{classpath}"/>
               </classpath>
            </nbjpdastart>
         </sequential>
      </macrodef>
      <macrodef name="nbjpdareload" uri="http://www.netbeans.org/ns/web-project/1">
         <attribute name="dir" default="${build.classes.dir}"/>
         <sequential>
            <nbjpdareload>
               <fileset includes="${fix.classes}" dir="@{dir}">
                  <include name="${fix.includes}*.class"/>
               </fileset>
            </nbjpdareload>
         </sequential>
      </macrodef>
      <macrodef name="nbjpdaappreloaded" uri="http://www.netbeans.org/ns/web-project/1">
         <sequential>
            <nbjpdaappreloaded/>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-debug-args">
      <property name="version-output" value="java version &#34;${ant.java.version}"/>
      <condition property="have-jdk-older-than-1.4">
         <or>
            <contains string="${version-output}" substring="java version &#34;1.0"/>
            <contains string="${version-output}" substring="java version &#34;1.1"/>
            <contains string="${version-output}" substring="java version &#34;1.2"/>
            <contains string="${version-output}" substring="java version &#34;1.3"/>
         </or>
      </condition>
      <condition property="debug-args-line" value="-Xdebug -Xnoagent -Djava.compiler=none"
                 else="-Xdebug">
         <istrue value="${have-jdk-older-than-1.4}"/>
      </condition>
      <condition property="debug-transport-by-os" value="dt_shmem" else="dt_socket">
         <os family="windows"/>
      </condition>
      <condition property="debug-transport" value="${debug.transport}"
                 else="${debug-transport-by-os}">
         <isset property="debug.transport"/>
      </condition>
   </target>
   <target name="-init-macrodef-debug" depends="-init-debug-args">
      <macrodef name="debug" uri="http://www.netbeans.org/ns/web-project/1">
         <attribute name="classname" default="${main.class}"/>
         <attribute name="classpath" default="${debug.classpath}:${j2ee.platform.classpath}"/>
         <attribute name="args" default="${application.args.param}"/>
         <element name="customize" optional="true"/>
         <sequential>
            <java fork="true" classname="@{classname}">
               <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
               <jvmarg line="${debug-args-line}"/>
               <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
               <jvmarg line="${runmain.jvmargs}"/>
               <classpath>
                  <path path="@{classpath}"/>
               </classpath>
               <syspropertyset>
                  <propertyref prefix="run-sys-prop."/>
                  <mapper type="glob" from="run-sys-prop.*" to="*"/>
               </syspropertyset>
               <arg line="@{args}"/>
               <customize/>
            </java>
         </sequential>
      </macrodef>
   </target>
   <target name="-init-taskdefs">
      <fail unless="libs.CopyLibs.classpath">
The libs.CopyLibs.classpath property is not set up.
This property must point to 
org-netbeans-modules-java-j2seproject-copylibstask.jar file which is part
of NetBeans IDE installation and is usually located at 
&lt;netbeans_installation&gt;/java&lt;version&gt;/ant/extra folder.
Either open the project in the IDE and make sure CopyLibs library
exists or setup the property manually. For example like this:
 ant -Dlibs.CopyLibs.classpath=a/path/to/org-netbeans-modules-java-j2seproject-copylibstask.jar
                </fail>
      <taskdef resource="org/netbeans/modules/java/j2seproject/copylibstask/antlib.xml"
               classpath="${libs.CopyLibs.classpath}"/>
   </target>
   <target name="-init-ap-cmdline-properties">
      <property name="annotation.processing.enabled" value="true"/>
      <property name="annotation.processing.processors.list" value=""/>
      <property name="annotation.processing.run.all.processors" value="true"/>
      <property name="javac.processorpath" value="${javac.classpath}"/>
      <property name="javac.test.processorpath" value="${javac.test.classpath}"/>
      <condition property="ap.supported.internal" value="true">
         <not>
            <matches string="${javac.source}" pattern="1\.[0-5](\..*)?"/>
         </not>
      </condition>
   </target>
   <target name="-init-ap-cmdline-supported" depends="-init-ap-cmdline-properties"
           if="ap.supported.internal">
      <condition property="ap.processors.internal"
                 value="-processor ${annotation.processing.processors.list}"
                 else="">
         <isfalse value="${annotation.processing.run.all.processors}"/>
      </condition>
      <condition property="ap.proc.none.internal" value="-proc:none" else="">
         <isfalse value="${annotation.processing.enabled}"/>
      </condition>
   </target>
   <target name="-init-ap-cmdline"
           depends="-init-ap-cmdline-properties,-init-ap-cmdline-supported">
      <property name="ap.cmd.line.internal" value=""/>
   </target>
   <target name="profile-init"
           depends="-profile-pre-init, init, -profile-post-init, -profile-init-check"/>
   <target name="-profile-pre-init"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-profile-post-init"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-profile-init-check"
           depends="-profile-pre-init, init, -profile-post-init">
      <fail unless="profiler.info.jvm">Must set JVM to use for profiling in profiler.info.jvm</fail>
      <fail unless="profiler.info.jvmargs.agent">Must set profiler agent JVM arguments in profiler.info.jvmargs.agent</fail>
   </target>
   <target name="init"
           depends="-pre-init,-init-private,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-junit,-init-macrodef-java,-init-macrodef-nbjpda,-init-macrodef-nbjsdebug,-init-macrodef-debug,-init-taskdefs,-init-ap-cmdline"/>
   <!--
                COMPILATION SECTION
            --><target name="deps-module-jar" depends="init" if="no.dist.ear.dir" unless="no.deps"/>
   <target name="deps-ear-jar" depends="init" if="dist.ear.dir" unless="no.deps"/>
   <target name="deps-jar" depends="init, deps-module-jar, deps-ear-jar" unless="no.deps"/>
   <target name="-pre-pre-compile" depends="init,deps-jar">
      <mkdir dir="${build.classes.dir}"/>
   </target>
   <target name="-pre-compile"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-copy-webdir">
      <copy todir="${build.web.dir}">
         <fileset excludes="${build.web.excludes},${excludes}" includes="${includes}"
                  dir="${web.docbase.dir}"/>
      </copy>
      <copy todir="${build.web.dir}/WEB-INF">
         <fileset excludes="${build.web.excludes}" dir="${webinf.dir}"/>
      </copy>
   </target>
   <target name="-do-compile"
           depends="init, deps-jar, -pre-pre-compile, -pre-compile, -copy-manifest, -copy-persistence-xml, -copy-webdir, library-inclusion-in-archive,library-inclusion-in-manifest"
           if="have.sources">
      <webproject2:javac destdir="${build.classes.dir}" gensrcdir="${build.generated.sources.dir}"/>
      <copy todir="${build.classes.dir}">
         <fileset dir="${src.dir}" includes="${includes}"
                  excludes="${build.classes.excludes},${excludes}"/>
      </copy>
   </target>
   <target name="-copy-manifest" if="has.custom.manifest">
      <mkdir dir="${build.meta.inf.dir}"/>
      <copy todir="${build.meta.inf.dir}">
         <fileset dir="${conf.dir}" includes="MANIFEST.MF"/>
      </copy>
   </target>
   <target name="-copy-persistence-xml" if="has.persistence.xml">
      <mkdir dir="${build.web.dir}/WEB-INF/classes/META-INF"/>
      <copy todir="${build.web.dir}/WEB-INF/classes/META-INF">
         <fileset dir="${persistence.xml.dir}" includes="persistence.xml"/>
      </copy>
   </target>
   <target name="-post-compile"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="compile"
           depends="init,deps-jar,-pre-pre-compile,-pre-compile,-do-compile,-post-compile"
           description="Compile project."/>
   <target name="-pre-compile-single"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-do-compile-single" depends="init,deps-jar,-pre-pre-compile">
      <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
      <webproject2:javac includes="${javac.includes}" excludes=""
                         gensrcdir="${build.generated.sources.dir}"/>
      <copy todir="${build.classes.dir}">
         <fileset dir="${src.dir}" includes="${includes}"
                  excludes="${build.classes.excludes},${excludes}"/>
      </copy>
   </target>
   <target name="-post-compile-single"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="compile-single"
           depends="init,deps-jar,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single"/>
   <property name="jspc.schemas" value="/resources/schemas/"/>
   <property name="jspc.dtds" value="/resources/dtds/"/>
   <target name="compile-jsps" depends="compile" if="do.compile.jsps"
           description="Test compile JSP pages to expose compilation errors.">
      <mkdir dir="${build.generated.dir}/src"/>
      <java classname="org.netbeans.modules.web.project.ant.JspC" fork="true"
            failonerror="true">
         <arg value="-uriroot"/>
         <arg file="${basedir}/${build.web.dir}"/>
         <arg value="-d"/>
         <arg file="${basedir}/${build.generated.dir}/src"/>
         <arg value="-die1"/>
         <arg value="-schemas ${jspc.schemas}"/>
         <arg value="-dtds ${jspc.dtds}"/>
         <arg value="-compilerSourceVM ${javac.source}"/>
         <arg value="-compilerTargetVM ${javac.target}"/>
         <arg value="-javaEncoding ${source.encoding}"/>
         <arg value="-sysClasspath ${libs.jsp-compilation-syscp.classpath}"/>
         <classpath path="${java.home}/../lib/tools.jar:${libs.jsp-compiler.classpath}:${libs.jsp-compilation.classpath}"/>
      </java>
      <mkdir dir="${build.generated.dir}/classes"/>
      <webproject2:javac srcdir="${build.generated.dir}/src" destdir="${build.generated.dir}/classes"
                         classpath="${build.classes.dir}:${libs.jsp-compilation.classpath}:${javac.classpath}:${j2ee.platform.classpath}"/>
   </target>
   <target name="-do-compile-single-jsp" depends="compile" if="jsp.includes">
      <fail unless="javac.jsp.includes">Must select some files in the IDE or set javac.jsp.includes</fail>
      <mkdir dir="${build.generated.dir}/src"/>
      <java classname="org.netbeans.modules.web.project.ant.JspCSingle" fork="true"
            failonerror="true">
         <arg value="-uriroot"/>
         <arg file="${basedir}/${build.web.dir}"/>
         <arg value="-d"/>
         <arg file="${basedir}/${build.generated.dir}/src"/>
         <arg value="-die1"/>
         <arg value="-schemas ${jspc.schemas}"/>
         <arg value="-dtds ${jspc.dtds}"/>
         <arg value="-sysClasspath ${libs.jsp-compilation-syscp.classpath}"/>
         <arg value="-jspc.files"/>
         <arg path="${jsp.includes}"/>
         <arg value="-compilerSourceVM ${javac.source}"/>
         <arg value="-compilerTargetVM ${javac.target}"/>
         <arg value="-javaEncoding ${source.encoding}"/>
         <classpath path="${java.home}/../lib/tools.jar:${libs.jsp-compiler.classpath}:${libs.jsp-compilation.classpath}"/>
      </java>
      <mkdir dir="${build.generated.dir}/classes"/>
      <webproject2:javac srcdir="${build.generated.dir}/src" destdir="${build.generated.dir}/classes"
                         classpath="${build.classes.dir}:${libs.jsp-compilation.classpath}:${javac.classpath}:${j2ee.platform.classpath}">
         <customize>
            <patternset includes="${javac.jsp.includes}"/>
         </customize>
      </webproject2:javac>
   </target>
   <target name="compile-single-jsp">
      <fail unless="jsp.includes">Must select a file in the IDE or set jsp.includes</fail>
      <antcall target="-do-compile-single-jsp"/>
   </target>
   <!--
                DIST BUILDING SECTION
            --><target name="-pre-dist"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-do-dist-without-manifest" if="do.war.package.without.custom.manifest"
           depends="init,compile,compile-jsps,-pre-dist">
      <dirname property="dist.jar.dir" file="${dist.war}"/>
      <mkdir dir="${dist.jar.dir}"/>
      <jar jarfile="${dist.war}" compress="${jar.compress}">
         <fileset dir="${build.web.dir}"/>
      </jar>
   </target>
   <target name="-do-dist-with-manifest" if="do.war.package.with.custom.manifest"
           depends="init,compile,compile-jsps,-pre-dist">
      <dirname property="dist.jar.dir" file="${dist.war}"/>
      <mkdir dir="${dist.jar.dir}"/>
      <jar manifest="${build.meta.inf.dir}/MANIFEST.MF" jarfile="${dist.war}"
           compress="${jar.compress}">
         <fileset dir="${build.web.dir}"/>
      </jar>
   </target>
   <target name="-do-tmp-dist-without-manifest"
           if="do.tmp.war.package.without.custom.manifest"
           depends="init,compile,compile-jsps,-pre-dist">
      <dirname property="dist.jar.dir" file="${dist.war}"/>
      <mkdir dir="${dist.jar.dir}"/>
      <jar jarfile="${dist.war}" compress="${jar.compress}">
         <fileset dir="${build.web.dir}"/>
      </jar>
   </target>
   <target name="-do-tmp-dist-with-manifest" if="do.tmp.war.package.with.custom.manifest"
           depends="init,compile,compile-jsps,-pre-dist">
      <dirname property="dist.jar.dir" file="${dist.war}"/>
      <mkdir dir="${dist.jar.dir}"/>
      <jar manifest="${build.meta.inf.dir}/MANIFEST.MF" jarfile="${dist.war}"
           compress="${jar.compress}">
         <fileset dir="${build.web.dir}"/>
      </jar>
   </target>
   <target name="do-dist"
           depends="init,compile,compile-jsps,-pre-dist,-do-dist-with-manifest,-do-dist-without-manifest"/>
   <target name="library-inclusion-in-manifest" depends="init" if="dist.ear.dir">
      <mkdir dir="${build.web.dir}/META-INF"/>
      <manifest file="${build.web.dir}/META-INF/MANIFEST.MF" mode="update"/>
   </target>
   <target name="library-inclusion-in-archive" depends="init" unless="dist.ear.dir"/>
   <target depends="init" name="-clean-webinf-lib" if="dist.ear.dir">
      <delete dir="${build.web.dir}/WEB-INF/lib"/>
   </target>
   <target name="do-ear-dist"
           depends="init,-clean-webinf-lib,compile,compile-jsps,-pre-dist,library-inclusion-in-manifest"
           if="do.tmp.war.package">
      <dirname property="dist.jar.dir" file="${dist.ear.war}"/>
      <mkdir dir="${dist.jar.dir}"/>
      <jar jarfile="${dist.ear.war}" compress="${jar.compress}"
           manifest="${build.web.dir}/META-INF/MANIFEST.MF">
         <fileset dir="${build.web.dir}"/>
      </jar>
   </target>
   <target name="-post-dist"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="dist" depends="init,compile,-pre-dist,do-dist,-post-dist"
           description="Build distribution (WAR)."/>
   <target name="dist-ear"
           depends="init,-clean-webinf-lib,-init-cos,compile,-pre-dist,do-ear-dist,-post-dist"
           description="Build distribution (WAR) to be packaged into an EAR."/>
   <!--
                EXECUTION SECTION
            --><target name="run" depends="run-deploy,run-display-browser"
           description="Deploy to server and show in browser."/>
   <target name="-pre-run-deploy"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-post-run-deploy"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-pre-nbmodule-run-deploy"><!-- Empty placeholder for easier customization. --><!-- This target can be overriden by NetBeans modules. Don't override it directly, use -pre-run-deploy task instead. --></target>
   <target name="-post-nbmodule-run-deploy"><!-- Empty placeholder for easier customization. --><!-- This target can be overriden by NetBeans modules. Don't override it directly, use -post-run-deploy task instead. --></target>
   <target name="-run-deploy-am"><!-- Task to deploy to the Access Manager runtime. --></target>
   <target name="run-deploy"
           depends="init,-init-cos,compile,compile-jsps,-do-compile-single-jsp,-pre-dist,-do-tmp-dist-with-manifest,-do-tmp-dist-without-manifest,-pre-run-deploy,-pre-nbmodule-run-deploy,-run-deploy-nb,-init-deploy-ant,-deploy-ant,-run-deploy-am,-post-nbmodule-run-deploy,-post-run-deploy,-do-update-breakpoints"/>
   <target name="-run-deploy-nb" if="netbeans.home">
      <nbdeploy debugmode="false" clientUrlPart="${client.urlPart}"
                forceRedeploy="${forceRedeploy}"/>
   </target>
   <target name="-init-deploy-ant" unless="netbeans.home">
      <property name="deploy.ant.archive" value="${dist.war}"/>
      <property name="deploy.ant.docbase.dir" value="${web.docbase.dir}"/>
      <property name="deploy.ant.resource.dir" value="${resource.dir}"/>
      <property name="deploy.ant.enabled" value="true"/>
   </target>
   <target name="run-undeploy"
           depends="dist,-run-undeploy-nb,-init-deploy-ant,-undeploy-ant"/>
   <target name="-run-undeploy-nb" if="netbeans.home">
      <fail message="Undeploy is not supported from within the IDE"/>
   </target>
   <target name="verify" depends="init,-pre-dist,dist,-post-dist">
      <nbverify file="${dist.war}"/>
   </target>
   <target name="run-display-browser"
           depends="run-deploy,-init-display-browser,-display-browser-nb,-display-browser-cl"/>
   <target name="-init-display-browser" if="do.display.browser">
      <condition property="do.display.browser.nb">
         <isset property="netbeans.home"/>
      </condition>
      <condition property="do.display.browser.cl">
         <isset property="deploy.ant.enabled"/>
      </condition>
   </target>
   <target name="-display-browser-nb" if="do.display.browser.nb">
      <nbbrowse url="${client.url}"/>
   </target>
   <target name="-get-browser" if="do.display.browser.cl" unless="browser">
      <condition property="browser" value="rundll32">
         <os family="windows"/>
      </condition>
      <condition property="browser.args" value="url.dll,FileProtocolHandler" else="">
         <os family="windows"/>
      </condition>
      <condition property="browser" value="/usr/bin/open">
         <os family="mac"/>
      </condition>
      <property environment="env"/>
      <condition property="browser" value="${env.BROWSER}">
         <isset property="env.BROWSER"/>
      </condition>
      <condition property="browser" value="/usr/bin/firefox">
         <available file="/usr/bin/firefox"/>
      </condition>
      <condition property="browser" value="/usr/local/firefox/firefox">
         <available file="/usr/local/firefox/firefox"/>
      </condition>
      <condition property="browser" value="/usr/bin/mozilla">
         <available file="/usr/bin/mozilla"/>
      </condition>
      <condition property="browser" value="/usr/local/mozilla/mozilla">
         <available file="/usr/local/mozilla/mozilla"/>
      </condition>
      <condition property="browser" value="/usr/sfw/lib/firefox/firefox">
         <available file="/usr/sfw/lib/firefox/firefox"/>
      </condition>
      <condition property="browser" value="/opt/csw/bin/firefox">
         <available file="/opt/csw/bin/firefox"/>
      </condition>
      <condition property="browser" value="/usr/sfw/lib/mozilla/mozilla">
         <available file="/usr/sfw/lib/mozilla/mozilla"/>
      </condition>
      <condition property="browser" value="/opt/csw/bin/mozilla">
         <available file="/opt/csw/bin/mozilla"/>
      </condition>
   </target>
   <target name="-display-browser-cl" depends="-get-browser" if="do.display.browser.cl">
      <fail unless="browser">
                    Browser not found, cannot launch the deployed application. Try to set the BROWSER environment variable.
                </fail>
      <property name="browse.url" value="${deploy.ant.client.url}${client.urlPart}"/>
      <echo>Launching ${browse.url}</echo>
      <exec executable="${browser}" spawn="true">
         <arg line="${browser.args} ${browse.url}"/>
      </exec>
   </target>
   <target name="run-main" depends="init,-init-cos,compile-single">
      <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
      <webproject1:java classname="${run.class}"/>
   </target>
   <target name="run-test-with-main"
           depends="init,compile-test-single,-pre-test-run-single">
      <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
      <webproject1:java classname="${run.class}" classpath="${run.test.classpath}"/>
   </target>
   <target name="-do-update-breakpoints" if="netbeans.home" depends="init">
      <webproject1:nbjpdaappreloaded/>
   </target>
   <!--
                DEBUGGING SECTION
            --><target name="debug" description="Debug project in IDE."
           depends="init,-init-cos,compile,compile-jsps,-do-compile-single-jsp,-pre-dist,-do-tmp-dist-with-manifest,-do-tmp-dist-without-manifest"
           if="netbeans.home">
      <nbstartserver debugmode="true"/>
      <antcall target="connect-debugger"/>
      <nbdeploy debugmode="true" clientUrlPart="${client.urlPart}" forceRedeploy="true"/>
      <antcall target="debug-display-browser"/>
      <antcall target="connect-client-debugger"/>
   </target>
   <target name="connect-debugger" if="do.debug.server" unless="is.debugged">
      <nbjpdaconnect name="${name}" host="${jpda.host}" address="${jpda.address}"
                     transport="${jpda.transport}">
         <classpath>
            <path path="${debug.classpath}:${j2ee.platform.classpath}"/>
         </classpath>
         <sourcepath>
            <path path="${web.docbase.dir}"/>
         </sourcepath>
      </nbjpdaconnect>
   </target>
   <target name="debug-display-browser" if="do.display.browser.debug">
      <nbbrowse url="${client.url}"/>
   </target>
   <target name="connect-client-debugger" if="do.debug.client">
      <webproject1:nbjsdebugstart webUrl="${client.url}"/>
   </target>
   <target name="-debug-start-debuggee-main-test" if="netbeans.home"
           depends="init,compile-test-single">
      <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
      <webproject1:debug classname="${debug.class}" classpath="${debug.test.classpath}"/>
   </target>
   <target name="debug-test-with-main" if="netbeans.home"
           depends="init,compile-test-single,-debug-start-debugger-main-test,-debug-start-debuggee-main-test"/>
   <target name="debug-single" if="netbeans.home"
           depends="init,compile,compile-jsps,-do-compile-single-jsp,debug"/>
   <target name="-debug-start-debugger-main-test" if="netbeans.home" depends="init">
      <webproject1:nbjpdastart name="${debug.class}" classpath="${debug.test.classpath}"/>
   </target>
   <target name="-debug-start-debugger" if="netbeans.home" depends="init">
      <webproject1:nbjpdastart name="${debug.class}"/>
   </target>
   <target name="-debug-start-debuggee-single" if="netbeans.home"
           depends="init,compile-single">
      <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
      <webproject1:debug classname="${debug.class}"/>
   </target>
   <target name="debug-single-main" if="netbeans.home"
           depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-single"/>
   <target name="-pre-debug-fix" depends="init">
      <fail unless="fix.includes">Must set fix.includes</fail>
      <property name="javac.includes" value="${fix.includes}.java"/>
   </target>
   <target name="-do-debug-fix" if="netbeans.home"
           depends="init,-pre-debug-fix,compile-single">
      <webproject1:nbjpdareload/>
   </target>
   <target name="debug-fix" if="netbeans.home" depends="init,-pre-debug-fix,-do-debug-fix"/>
   <!--
            =================
            PROFILING SECTION
            =================
            --><target name="profile" description="Profile a J2EE project in the IDE.">
      <condition property="profiler.startserver.target" value="start-profiled-server-extraargs"
                 else="start-profiled-server">
         <isset property="profiler.info.jvmargs.extra"/>
      </condition>
      <antcall target="${profiler.startserver.target}"/>
      <antcall target="run"/>
      <antcall target="start-loadgen"/>
   </target>
   <target name="start-profiled-server">
      <nbstartprofiledserver forceRestart="${profiler.j2ee.serverForceRestart}"
                             startupTimeout="${profiler.j2ee.serverStartupTimeout}"
                             javaPlatform="${profiler.info.javaPlatform}">
         <jvmarg value="${profiler.info.jvmargs.agent}"/>
         <jvmarg value="${profiler.j2ee.agentID}"/>
      </nbstartprofiledserver>
   </target>
   <target name="start-profiled-server-extraargs">
      <nbstartprofiledserver forceRestart="${profiler.j2ee.serverForceRestart}"
                             startupTimeout="${profiler.j2ee.serverStartupTimeout}"
                             javaPlatform="${profiler.info.javaPlatform}">
         <jvmarg value="${profiler.info.jvmargs.extra}"/>
         <jvmarg value="${profiler.info.jvmargs.agent}"/>
         <jvmarg value="${profiler.j2ee.agentID}"/>
      </nbstartprofiledserver>
   </target>
   <target name="start-loadgen" if="profiler.loadgen.path">
      <loadgenstart path="${profiler.loadgen.path}"/>
   </target>
   <!--
                JAVADOC SECTION
            --><target name="javadoc-build" depends="init" if="have.sources">
      <mkdir dir="${dist.javadoc.dir}"/>
      <javadoc destdir="${dist.javadoc.dir}" source="${javac.source}"
               notree="${javadoc.notree}"
               use="${javadoc.use}"
               nonavbar="${javadoc.nonavbar}"
               noindex="${javadoc.noindex}"
               splitindex="${javadoc.splitindex}"
               author="${javadoc.author}"
               version="${javadoc.version}"
               windowtitle="${javadoc.windowtitle}"
               private="${javadoc.private}"
               additionalparam="${javadoc.additionalparam}"
               failonerror="true"
               useexternalfile="true"
               encoding="${javadoc.encoding.used}"
               docencoding="UTF-8"
               charset="UTF-8">
         <classpath>
            <path path="${javac.classpath}:${j2ee.platform.classpath}"/>
         </classpath>
         <fileset dir="${src.dir}" includes="${includes}" excludes="${excludes}">
            <filename name="**/*.java"/>
         </fileset>
         <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
            <include name="**/*.java"/>
         </fileset>
      </javadoc>
      <copy todir="${dist.javadoc.dir}">
         <fileset dir="${src.dir}" includes="${includes}" excludes="${excludes}">
            <filename name="**/doc-files/**"/>
         </fileset>
         <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
            <include name="**/doc-files/**"/>
         </fileset>
      </copy>
   </target>
   <target name="javadoc-browse" if="netbeans.home" unless="no.javadoc.preview"
           depends="init,javadoc-build">
      <nbbrowse file="${dist.javadoc.dir}/index.html"/>
   </target>
   <target name="javadoc" depends="init,javadoc-build,javadoc-browse"
           description="Build Javadoc."/>
   <!--
                
                JUNIT COMPILATION SECTION
            --><target name="-pre-pre-compile-test" if="have.tests" depends="init,compile">
      <mkdir dir="${build.test.classes.dir}"/>
      <property name="j2ee.platform.embeddableejb.classpath" value=""/>
   </target>
   <target name="-pre-compile-test"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-do-compile-test" if="have.tests"
           depends="init,compile,-pre-pre-compile-test,-pre-compile-test">
      <webproject2:javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" debug="true"
                         classpath="${javac.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}"/>
      <copy todir="${build.test.classes.dir}">
         <fileset dir="${test.src.dir}" includes="${includes}"
                  excludes="${build.classes.excludes},${excludes}"/>
      </copy>
   </target>
   <target name="-post-compile-test"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="compile-test"
           depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test"/>
   <target name="-pre-compile-test-single"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="-do-compile-test-single" if="have.tests"
           depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single">
      <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
      <webproject2:javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" debug="true"
                         classpath="${javac.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}"
                         includes="${javac.includes}"
                         excludes=""/>
      <copy todir="${build.test.classes.dir}">
         <fileset dir="${test.src.dir}" includes="${includes}"
                  excludes="${build.classes.excludes},${excludes}"/>
      </copy>
   </target>
   <target name="-post-compile-test-single"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="compile-test-single"
           depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single"/>
   <!--
                
                JUNIT EXECUTION SECTION
            --><target name="-pre-test-run" if="have.tests" depends="init">
      <mkdir dir="${build.test.results.dir}"/>
   </target>
   <target name="-do-test-run" if="have.tests" depends="init,compile-test,-pre-test-run">
      <webproject2:junit testincludes="**/*Test.java"/>
   </target>
   <target name="-post-test-run" if="have.tests"
           depends="init,compile-test,-pre-test-run,-do-test-run">
      <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
   </target>
   <target name="test-report" if="have.tests" depends="init"/>
   <target name="-test-browse" if="netbeans.home+have.tests" depends="init"/>
   <target name="test"
           depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse"
           description="Run unit tests."/>
   <target name="-pre-test-run-single" if="have.tests" depends="init">
      <mkdir dir="${build.test.results.dir}"/>
   </target>
   <target name="-do-test-run-single" if="have.tests"
           depends="init,compile-test-single,-pre-test-run-single">
      <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
      <webproject2:junit includes="${test.includes}" excludes=""/>
   </target>
   <target name="-post-test-run-single" if="have.tests"
           depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single">
      <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
   </target>
   <target name="test-single"
           depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single"
           description="Run single unit test."/>
   <!--
                
                JUNIT DEBUGGING SECTION
            --><target name="-debug-start-debuggee-test" if="have.tests" depends="init,compile-test">
      <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
      <property name="test.report.file"
                location="${build.test.results.dir}/TEST-${test.class}.xml"/>
      <delete file="${test.report.file}"/>
      <!-- must exist, otherwise the XML formatter would fail --><mkdir dir="${build.test.results.dir}"/>
      <webproject1:debug args="${test.class}"
                         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner"
                         classpath="${ant.home}/lib/ant.jar:${ant.home}/lib/ant-junit.jar:${debug.test.classpath}:${j2ee.platform.embeddableejb.classpath}">
         <customize>
            <arg value="showoutput=true"/>
            <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter"/>
            <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,${test.report.file}"/>
         </customize>
      </webproject1:debug>
   </target>
   <target name="-debug-start-debugger-test" if="netbeans.home+have.tests"
           depends="init,compile-test">
      <webproject1:nbjpdastart name="${test.class}" classpath="${debug.test.classpath}"/>
   </target>
   <target name="debug-test"
           depends="init,compile-test,-debug-start-debugger-test,-debug-start-debuggee-test"/>
   <target name="-do-debug-fix-test" if="netbeans.home"
           depends="init,-pre-debug-fix,compile-test-single">
      <webproject1:nbjpdareload dir="${build.test.classes.dir}"/>
   </target>
   <target name="debug-fix-test" if="netbeans.home"
           depends="init,-pre-debug-fix,-do-debug-fix-test"/>
   <!--
        =========================
        TESTS PROFILING  SECTION
        =========================
        --><target name="profile-test-single" if="netbeans.home"
           depends="profile-init,compile-test-single">
      <nbprofiledirect>
         <classpath>
            <path path="${run.test.classpath}"/>
            <path path="${j2ee.platform.classpath}"/>
         </classpath>
      </nbprofiledirect>
      <junit showoutput="true" fork="true" dir="${profiler.info.dir}"
             jvm="${profiler.info.jvm}"
             failureproperty="tests.failed"
             errorproperty="tests.failed">
         <env key="${profiler.info.pathvar}"
              path="${profiler.info.agentpath}:${profiler.current.path}"/>
         <jvmarg value="${profiler.info.jvmargs.agent}"/>
         <jvmarg line="${profiler.info.jvmargs}"/>
         <test name="${profile.class}"/>
         <classpath>
            <path path="${run.test.classpath}"/>
            <path path="${j2ee.platform.classpath}"/>
         </classpath>
         <syspropertyset>
            <propertyref prefix="test-sys-prop."/>
            <mapper type="glob" from="test-sys-prop.*" to="*"/>
         </syspropertyset>
         <formatter type="brief" usefile="false"/>
         <formatter type="xml"/>
      </junit>
   </target>
   <!--
                
                CLEANUP SECTION
            --><target name="deps-clean" depends="init" unless="no.deps"/>
   <target name="do-clean" depends="init">
      <condition value="${build.web.dir}" property="build.dir.to.clean">
         <isset property="dist.ear.dir"/>
      </condition>
      <property value="${build.web.dir}" name="build.dir.to.clean"/>
      <delete includeEmptyDirs="true" quiet="true">
         <fileset dir="${build.dir.to.clean}/WEB-INF/lib"/>
      </delete>
      <delete dir="${build.dir}"/>
      <available file="${build.dir.to.clean}/WEB-INF/lib" type="dir"
                 property="status.clean-failed"/>
      <delete dir="${dist.dir}"/>
   </target>
   <target name="check-clean" depends="do-clean" if="status.clean-failed">
      <echo message="Warning: unable to delete some files in ${build.web.dir}/WEB-INF/lib - they are probably locked by the J2EE server. "/>
      <echo level="info"
            message="To delete all files undeploy the module from Server Registry in Runtime tab and then use Clean again."/>
   </target>
   <target name="undeploy-clean" depends="init" if="netbeans.home">
      <nbundeploy failOnError="false" startServer="false"/>
   </target>
   <target name="-post-clean"><!-- Empty placeholder for easier customization. --><!-- You can override this target in the ../build.xml file. --></target>
   <target name="clean"
           depends="init,undeploy-clean,deps-clean,do-clean,check-clean,-post-clean"
           description="Clean build products."/>
   <target name="clean-ear" depends="clean" description="Clean build products."/>
</project>