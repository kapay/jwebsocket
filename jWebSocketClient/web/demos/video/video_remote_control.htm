<html>
	<head>
		<!--
	//	****************************************************************************
	//	jWebSocket Simple Chat (uses jWebSocket Client and Server)
	//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
	//	****************************************************************************
	//	This program is free software; you can redistribute it and/or modify it
	//	under the terms of the GNU Lesser General Public License as published by the
	//	Free Software Foundation; either version 3 of the License, or (at your
	//	option) any later version.
	//	This program is distributed in the hope that it will be useful, but WITHOUT
	//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
	//	more details.
	//	You should have received a copy of the GNU Lesser General Public License along
	//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
	//	****************************************************************************
	//  Authors: Unni Vemanchery Mana, Alexander Schulze
	
	//  This demo is used to show the capabilities of jWebSocket in Video Remote Control.
	//  This example works similar to parent child relationship in which parent window
	//  ie first window that is loaded in browser takes control of the Video streaming.The
	//  other window(s) who opened after the main one will be its children. 
	//  slider see: http://jqueryui.com/demos/slider/
		-->

		<title></title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script> 
		<script type="text/javascript" src="jquery.min.js"></script>
		<script type="text/javascript" src="jquery-ui.min.js"></script>
		<link href="jquery-ui.css" rel="stylesheet" type="text/css"/>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script type="text/javascript" >
			
			var mVideo;
			var eLog;
			var lWSC;
			var mSliderProgress;
			var mSliderVolume;
			
			var duration = 0;
			var deltaTime = 0;
			var eElapsed = null;
			
			var mSec = 0;
			var mMin = 0;
			var mHour = 0;
			
			var mDelta = 1;
			var mIsPaused = false;
			// interval to update the progressbar
			var hProgressIntv = null;
			// interval to send progress synchronization tokens
			var hSyncIntv = null;

			// broadcasts the new slider position
			function sendProgress( aPos ) {
				lWSC.broadcastToken({
					subNS: "org.jwebsocket.demos.vidremctrl",
					subType: "progress",
					progress: aPos
				});
			}
  
			// broadcasts the playVideo action
			function sendPlay() {
				lWSC.broadcastToken({
					subNS: "org.jwebsocket.demos.vidremctrl",
					subType: "play"
				});
			}
  
			// broadcasts the pauseVideo action
			function sendPause() {
				lWSC.broadcastToken({
					subNS: "org.jwebsocket.demos.vidremctrl",
					subType: "pause"
				});
			}
  
			// broadcasts the stopVideo action
			function sendStop() {
				lWSC.broadcastToken({
					subNS: "org.jwebsocket.demos.vidremctrl",
					subType: "stop"
				});
			}
  
			// the start video method
			function playVideo() {
				if( !mVideo ) {
					alert( "Video has not been initialized.." );
					return false;
				}
				
				if( mIsPaused == false ) {
					resetVideo(); 
					mDelta = 1; 
				}
				
				// Retrieves the length of the current playing video
				// in seconds
				// calculating video duration and time increment in delta
				if( mVideo.readyState > 0 && mIsPaused == false ) {

					duration = mVideo.duration.toFixed(2);
					deltaTime = ( duration / 99.00 ).toFixed( 2 ) ;

					// starts video timer;
					startSyncIntv(); 
				} 
				
				// starts progress interval
				startProgressIntv();
				mVideo.play();
				log( "Video started." );   
				return true;
			}
			
			// the event handler for the play button
			// if playVideo succeeeds it broadcasts the play event
			function processPlayVideoClick() {
				if( playVideo() ) {
					sendPlay();
				}	
			}

			function resetVideo() {
				mDelta = 0;
				mHour = 0; 
				mMin = 0;  
				mSec = 0;  
				showProgress( mDelta );
				showElapsed();
			}
  
			// This method is used to pauseVideo the
			// current video play
			function pauseVideo() {
				if( mVideo ) {
					mIsPaused = true;
					mVideo.pause();
					stopProgressIntv();
					log( "Video paused." );   
					return true;
				}	
				return false;
			}
			
			// the event handler for the pause button
			// if pauseVideo succeeeds it broadcasts the pause event
			function processPauseVideoClick() {
				if( pauseVideo() ) {
					sendPause();
				}
			}

			// This method takes care of call back
			// and moves the slider automatically with the 
			// value broadcasted by its peer. Note that the method
			// is checking to avoid the current slider not to move
			function setProgress() {
				mDelta = getProgress();   
				mVideo.currentTime = Math.round( mDelta * deltaTime );
				showElapsed();
			}	
			
			// This method is used to stopVideo the 
			// current video play as abort is 
			// not a method and cannot be used. 
			function stopVideo() {
				if( mVideo ) {
					mVideo.currentTime = duration + 10;  
					mIsPaused = false;
					stopProgressIntv();
					stopSyncIntv();
					resetVideo();
					showElapsed();
					return true;
				}	
				return false;
			}

			function processStopVideoClick() {
				if( stopVideo() ) {
					sendStop();
				}
			}


			// This method adjusts video current time to mSec
			// so that it will be in sync with video current
			// time
			function showElapsed() {
				mMin = parseInt( mVideo.currentTime / 60 );
				mSec = parseInt( mVideo.currentTime % 60 );
				eElapsed.firstChild.nodeValue = 
					jws.tools.zerofill( mHour, 2 )
					+ ":" + jws.tools.zerofill( mMin, 2 )
					+ ":" + jws.tools.zerofill( mSec, 2 );
			}

			// This method is used to track the timer for the video
			// progress event.The timer ticks for every one second 
			function startSyncIntv() {
				stopSyncIntv();
				hSyncIntv = window.setInterval(
					function() {
						if( !mVideo.ended ) {
						} else {
							resetVideo();
							showProgress( mDelta );
							stopSyncIntv();
							stopProgressIntv();
							log( "Video stopped." );   
						}
						showElapsed(); 				
					}, 
					10000
				);
			}

			function stopSyncIntv() {
				if( hSyncIntv != null ) {
					window.clearInterval( hSyncIntv ); 
				}
				hSyncIntv = null;
			}

			function getProgress() {
				return $( "#sliderProgress" ).slider( "value" );
			}	


			function showProgress( aValue ) {
				$( "#sliderProgress" ).slider( "value", aValue );
			}

			// start progress interval for update
			function startProgressIntv() {
				if( hProgressIntv ) {
					stopProgressIntv();
				}
				var stimer = deltaTime * 1000;
				hProgressIntv = window.setInterval(
					function() {
						showProgress( mDelta );
						mDelta++;
						// sendProgress( mDelta );
					}, 
					stimer
				);
			}

			// stop progress interval
			function stopProgressIntv() {
				if( hProgressIntv ) {
					window.clearInterval( hProgressIntv ); 
					hProgressIntv = null;
				}
			}	

			// This is the generic call back related to web socket
			// This following code will execute based on the events
			function logon() {
				var lURL = jws.getDefaultServerURL();
				lWSC.logon( lURL, "root", "root", {

					// OnOpen callback
					OnOpen: function( aEvent ) {
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						log( JSON.stringify( aToken) );
						if( "org.jwebsocket.demos.vidremctrl" == aToken.subNS ) {
							if( "progress" == aToken.subType ) {
								setProgress( aToken.progress );
							} else if( "start" == aToken.subType ) {
								playVideo();
							} else if( "pause" == aToken.subType ) {
								pauseVideo();
							} else if( "stop" == aToken.subType ) {
								stopVideo();
							}
						} 
					},
					
					// OnClose callback
					OnClose: function( aEvent ) {
						lWSC.stopKeepAlive();
					}

				});
			}

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function initPage() {
				if( jws.browserSupportsWebSockets()) {
					lWSC = new jws.jWebSocketJSONClient();
				}
				
				eLog = jws.$( "sdivLog" );
				mVideo = jws.$( "vid" );
				eElapsed = jws.$( "elapsed" );
				
				resetVideo();
				showElapsed();
				
				logon();
			}

			function exitPage() {
				if( lWSC ) {
					lWSC.close();
				}	
			}
			
		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">Video Streaming Demo</td>
				<!--				
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">{nbsp}Client{nbdash}Id:{nbsp}-</span></td>
				-->
			</tr>
		</table>

		<!-- HTML5 enabled mVideo attribute that plays mVideo. 
		 In order to make a custom mVideo control, we need to
		 remove 'control' attribute. height and width attribute
		 specfied its dimensions.The mVideo type currently uses
		 webm standdard, yet another mVideo format type initiated
		 by google and ogv.  
		-->
		<video id="vid"  height = "240"  width = "420">

			<source src="sintel-trailer.ogv" type='video/ogg; codecs="theora, vorbis"'> 

			<!--
			<source src="pr6.webm"> -->
		</video>

		<style>
			#demo-frame > div.demo { padding: 10px !important; }
		</style>
		<script>
			$(function() {
				mSliderProgress = $( "#sliderProgress" ).slider({
					max: 100,
					change: function(event, ui) {
						setProgress();
					}
				});
				mSliderVolume = $( "#sliderVolume" ).slider({
					max: 100,
					change: function(event, ui) { 
					}
				});
			});
		</script>

		<table width="500">
			<tr>
				<td width="5">
					Position:
				</td>
				<td>
					<div class="demo">
						<div id="sliderProgress"></div>
					</div>
				</td>
			</tr>
			<tr>
				<td width="5">Volume:
				</td>
				<td>
					<div class="demo">
						<div id="sliderVolume"></div>
					</div>
				</td>
			</tr>
			<tr>
				<td width="5">Elapsed:
				</td>
				<td>
					<div id="elapsed">&nbsp;
					</div>
				</td>
			</tr>
		</table>

		<!-- Control buttons --> 
		<table>
			<tr>
				<td>
					<input type="button" value="Play"  onclick="processPlayVideoClick();" class="sbtnDlg"> 
				</td>
				<td>
					<input type="button" value="Pause" onclick="processPauseVideoClick();" class="sbtnDlg">
				</td>
				<td>
					<input type="button" value="Stop"  onclick="processStopVideoClick();"  class="sbtnDlg">
				</td>
				<td>
					<input type="button" value="Clear Log"  onclick="clearLog();"  class="sbtnDlg">
				</td>
			</tr>
		</table>

		<!-- jWebSocket standard log --> 
		<div id="sdivLog" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>

	</body>
</html>


