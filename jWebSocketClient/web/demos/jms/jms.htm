<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Channel Demo (uses jWebSocket Client and Server)
		//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
		//	****************************************************************************
		//	This program is free software; you can redistribute it and/or modify it
		//	under the terms of the GNU Lesser General Public License as published by the
		//	Free Software Foundation; either version 3 of the License, or (at your
		//	option) any later version.
		//	This program is distributed in the hope that it will be useful, but WITHOUT
		//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
		//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
		//	more details.
		//	You should have received a copy of the GNU Lesser General Public License along
		//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket JMS Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<!-- load the jWebSocket JavaScript client library -->
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<!-- this one imports the client side streaming plug-in -->
		<script type="text/javascript" src="../../res/js/jwsJMSPlugIn.js"></script>
		<!-- this one imports the client side streaming plug-in -->
		<!-- <script type="text/javascript" src="../../res/js/jWebSocket_bundle.js"></script> -->
		<script type="text/javascript" language="JavaScript">

			var eLog = null,
				eKeepAlive = null,
				eMessage = null,
				eChannelId = null,
				eChannelName = null,
				eAccessKey = null,
				eSecretKey = null,
				eIsPrivate = null,
				eIsSystem = null,
				eKeepAlive = null,
				eChannelSel = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lWSC = null;
			var connectionFactory = null;
			var connection = null;
			var session = null;
			var queue = null;

			function login() {
				// URL is ws[s]://[hostname|localhost]:8787[/context][/servlet/][;args...]
				// deprecated: JWS_SERVER_URL;
				log( "Login to " + connectionFactory.mUrl + " ..." );
				try {
					var lRes = connectionFactory.logon("guest", "guest", {
						// OnOpen callback
						OnOpen: function( aEvent ) {
							log( "<font style='color:#888'>jWebSocket connection established.</font>" );
							jws.$("simgStatus").src = "../../images/connected.png";
						},

						OnWelcome: function() {
							//getChannels();
						},

						// OnMessage callback
						OnMessage: function( aEvent ) {
							log( "<font style='color:#888'>jWebSocket message received: '" + aEvent.data + "'</font>" );
							if( lWSC.isLoggedIn() ) {
								jws.$("simgStatus").src = "../../images/authenticated.png";
							} else {
								jws.$("simgStatus").src = "../../images/connected.png";
							}
							jws.$("slblClientId").innerHTML =
								"&nbsp;Client&#x2011;Id:&nbsp;"
								+ lWSC.getId() + "&nbsp;"
								+ ( jws.browserSupportsNativeWebSockets ? "(native)" : "(flashbridge)" );
						},

						// OnClose callback
						OnClose: function( aEvent ) {
							log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
							jws.$("simgStatus").src = "../../images/disconnected.png";
							jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
						}

					});
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}

			// log out the client from the jWebSocket server
			function logout() {
				if( lWSC ) {
					lWSC.stopKeepAlive();
					log( "Disconnecting..." );
					var lRes = lWSC.close({ timeout: 3000 });
					log( lWSC.resultToString( lRes ) );
				}
			}

			// try to create a new connection on the server
			// on success the OnChannelCreated event is fired
			function createConnection() {
				log( "Creating connection...");
				connection = connectionFactory.createConnection();
				log(connection.getRes());
			}
			
			function createSession() {
				log("Creating session...");
				session = connection.createSession(false, jws.JMSPlugIn.AUTO_ACKNOWLEDGE);
				log("the res from the created session :"+session.getRes());
			}
			
			function createQueue() {
				log("Creating queue...");
				queue = session.createQueue(jws.$( "stxfDestinationName" ).value);
				log(queue.getRes());
			}
			
			function createConsumer() {
				log("Creating consumer...");
				consumer = session.createConsumer(jws.$( "stxfDestinationName" ).value);
				log(consumer.getRes());
			}

						
			

			function initPage() {
				eLog = jws.$( "sdivChat" );
				eMessage = jws.$( "stxfMsg" );
				eChannelId = jws.$( "stxfChannelId" );
				eChannelName = jws.$( "stxfChannelId" );
				eAccessKey = jws.$( "stxfAccessKey" );
				eSecretKey = jws.$( "stxfSecretKey" );
				eIsPrivate = jws.$( "schkPrivate" );
				eIsSystem = jws.$( "schkSystem" );
				eKeepAlive =  jws.$( "schkKeepAlive" );
				eChannelSel = jws.$( "sselChannel" );

				if( window.WebSocket ) {
					lWSC = new jws.jWebSocketJSONClient();
					/*lWSC.setChannelCallbacks({
						OnChannelCreated: onChannelCreatedObs,
						OnChannelRemoved: onChannelRemovedObs,
						OnChannelsReceived: onChannelsReceivedObs
					});*/
					log("going to create connectionFactory");
					connectionFactory = new lWSC.ConnectionFactory(jws.getDefaultServerURL(), lWSC);
					log("created connectionFactory: ");
					log(connectionFactory);
				} else {
					jws.$( "sbtnConnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnDisconnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnSubscribe" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnUnsubscribe" ).setAttribute( "disabled", "disabled" );
					jws.$( "schkKeepAlive" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				lWSC.stopKeepAlive();
				logout();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/streaming/streaming.htm" );
			}
		</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket JMS Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>
		<p>This demo shows how messages can be retrieved and broadcasted using a publish/subscribe or point-to-point mechanism based on JMS.</p>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnConnect" type="button" value="Login" onclick="login();"
							   title="Authenticates you against the jWebSocket Server (using 'guest' account).">
					</td>
					
					<td width="5">
						<select id="sselChannel" title="Channel to subscribe to or unsubscribe from.">
							<!--
							not required to set fix channels here,
							the drop down box is filled by OnChannelsReceived event
							<option selected="selected" value="publicA">Public A</option>
							<option value="publicB">Public B</option>
							<option value="privateA">Private A</option>
							<option value="privateB">Private B</option>
							<option value="systemA">System A</option>
							<option value="systemB">System B</option>
						   -->
						</select>
					</td>
					<td width="">
						<input class="sbtnDlg" id="sbtnCreateConnection" type="button" value="connect" onclick="createConnection();"
							   title="Creates a jms connection at the server side.">
					</td>
					<td width="">
						<input class="sbtnDlg" id="sbtnCreateSession" type="button" value="session" onclick="createSession();"
							   title="Creates a jms session at the server side.">
					</td>
					<td width="">
						<input class="sbtnDlg" id="sbtnCreateQueue" type="button" value="queue" onclick="createQueue();"
							   title="Creates a queue at the server side.">
					</td>
					<td width="">
						<input class="sbtnDlg" id="sbtnCreateConsumer" type="button" value="consumer" onclick="createConsumer();"
							   title="Creates a consumer at the server side.">
					</td>
				</tr>
				<tr class="strDlg">
					<td width="70">
						<input class="stxfDlg" id="stxfDestinationName" type="text" value="test.queue" style="width:99%"
							   title="Name to create a new destination.">
					</td>
					<td width="5">
						&nbsp;
					</td>
				</tr>
				<tr class="strDlg">
				<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Logout" onclick="logout();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"
							   title="Clears the result and event log above.">
					</td>
					<td width="" colspan="1">
						<input class="stxfDlg" id="stxfMsg" type="text" value="Your Message" style="width:99%"
							   title="Message to be broadcasted on the selected channel.">
					</td>
					<td width="5">
						<input class="sbtnDlg" id="sbtnPublish" type="button" value="Publish" onclick="publish();"
							   title="Broadcasts the message on the selected channel.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
